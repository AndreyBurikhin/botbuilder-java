package Microsoft.Bot.Builder;

import Newtonsoft.Json.*;
import Newtonsoft.Json.Linq.*;
import java.util.*;

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.


/** 
 Contains recognition results generated by an <see cref="IRecognizer"/>.
 
 {@link IRecognizer.RecognizeAsync(ITurnContext, System.Threading.CancellationToken)}
*/
public class RecognizerResult implements IRecognizerConvert
{
	/** 
	 Gets or sets the input text to recognize.
	 
	 <value>
	 Original text to recognizer.
	 </value>
	*/
//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:
//ORIGINAL LINE: [JsonProperty("text")] public string Text {get;set;}
	private String Text;
	public final String getText()
	{
		return Text;
	}
	public final void setText(String value)
	{
		Text = value;
	}

	/** 
	 Gets or sets the input text as modified by the recognizer, for example for spelling correction.
	 
	 <value>
	 Text modified by recognizer.
	 </value>
	*/
//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:
//ORIGINAL LINE: [JsonProperty("alteredText")] public string AlteredText {get;set;}
	private String AlteredText;
	public final String getAlteredText()
	{
		return AlteredText;
	}
	public final void setAlteredText(String value)
	{
		AlteredText = value;
	}

	/** 
	 Gets or sets the recognized intents, with the intent as key and the confidence as value.
	 
	 <value>
	 Mapping from intent to information about the intent.
	 </value>
	*/
//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:
//ORIGINAL LINE: [JsonProperty("intents")] public IDictionary<string, IntentScore> Intents {get;set;}
	private Map<String, IntentScore> Intents;
	public final Map<String, IntentScore> getIntents()
	{
		return Intents;
	}
	public final void setIntents(Map<String, IntentScore> value)
	{
		Intents = value;
	}

	/** 
	 Gets or sets the recognized top-level entities.
	 
	 <value>
	 Object with each top-level recognized entity as a key.
	 </value>
	*/
//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:
//ORIGINAL LINE: [JsonProperty("entities")] public JObject Entities {get;set;}
	private JObject Entities;
	public final JObject getEntities()
	{
		return Entities;
	}
	public final void setEntities(JObject value)
	{
		Entities = value;
	}

	/** 
	 Gets or sets properties that are not otherwise defined by the <see cref="RecognizerResult"/> type but that
	 might appear in the REST JSON object.
	 
	 <value>The extended properties for the object.</value>
	 With this, properties not represented in the defined type are not dropped when
	 the JSON object is deserialized, but are instead stored in this property. Such properties
	 will be written to a JSON object when the instance is serialized.
	*/
//C# TO JAVA CONVERTER TODO TASK: Java annotations will not correspond to .NET attributes:
//ORIGINAL LINE: [JsonExtensionData(ReadData = true, WriteData = true)] public IDictionary<string, object> Properties {get;set;} = new Dictionary<string, object>();
	private Map<String, Object> Properties = new HashMap<String, Object> ();
	public final Map<String, Object> getProperties()
	{
		return Properties;
	}
	public final void setProperties(Map<String, Object> value)
	{
		Properties = value;
	}

	/** <inheritdoc />
	*/
//C# TO JAVA CONVERTER TODO TASK: There is no Java equivalent to the C# 'dynamic' keyword:
	public final void Convert(dynamic result)
	{
		setText(result.Text);
		setAlteredText(result.AlteredText);
		setIntents(result.Intents);
		setEntities(result.Entities);
		setProperties(result.Properties);
	}
}